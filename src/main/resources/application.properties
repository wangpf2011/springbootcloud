server.port=8080
server.contextPath=/jess/
server.session.timeout=10
server.tomcat.uri-encoding=UTF-8
management.port = 8081

# spring mvc
spring.mvc.view.prefix=WEB-INF/
spring.mvc.view.suffix=.jsp

###########################\u4e3b\u6570\u636e\u6e90\uff0c\u9ed8\u8ba4\u7684
spring.datasource.url=jdbc:mysql://localhost:3306/springbootcloud?characterEncoding=utf8&useSSL=true
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=123456
#druid \u8fde\u63a5\u6c60\u7684\u914d\u7f6e \u53ef\u4ee5\u662f\u9ed8\u8ba4\u7684
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.filters=stat
#\u6700\u5c0f\u7a7a\u95f2\u8fde\u63a5
spring.datasource.druid.min-idle=5
#\u6700\u5927\u8fde\u63a5\u6570\u91cf
spring.datasource.druid.max-active=100
spring.datasource.druid.initial-size=1
spring.datasource.druid.max-wait=60000
spring.datasource.druid.time-between-eviction-runs-millis=60000
spring.datasource.druid.min-evictable-idle-time-millis=300000
#\u68c0\u6d4b\u6570\u636e\u5e93\u7684\u67e5\u8be2\u8bed\u53e5
spring.datasource.druid.validation-query=select 'x'
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-open-prepared-statements=20
###########################\u4e3b\u6570\u636e\u6e90\uff0c\u9ed8\u8ba4\u7684

###########################mybatis\u914d\u7f6e
mybatis.mapper-locations=classpath:mappers/*.xml
mybatis.type-aliases-package=com.wf.ssm
mybatis.configLocation: classpath:mybatis-config.xml
###########################mybatis\u914d\u7f6e

###########################kafka\u76f8\u5173
spring.kafka.bootstrap-servers=127.0.0.1:9092
#\u751f\u4ea7\u8005\u7684\u914d\u7f6e\uff0c\u5927\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684\uff0c\u8fd9\u91cc\u5217\u51fa\u51e0\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u5c5e\u6027
#\u6bcf\u6279\u6b21\u53d1\u9001\u6d88\u606f\u7684\u6570\u91cf
spring.kafka.producer.batch-size=16
#\u8bbe\u7f6e\u5927\u4e8e0\u7684\u503c\u5c06\u4f7f\u5ba2\u6237\u7aef\u91cd\u65b0\u53d1\u9001\u4efb\u4f55\u6570\u636e\uff0c\u4e00\u65e6\u8fd9\u4e9b\u6570\u636e\u53d1\u9001\u5931\u8d25\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u91cd\u8bd5\u4e0e\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u53d1\u9001\u9519\u8bef\u65f6\u7684\u91cd\u8bd5\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5141\u8bb8\u91cd\u8bd5\u5c06\u6f5c\u5728\u7684\u6539\u53d8\u6570\u636e\u7684\u987a\u5e8f\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u6d88\u606f\u8bb0\u5f55\u90fd\u662f\u53d1\u9001\u5230\u540c\u4e00\u4e2apartition\uff0c\u5219\u7b2c\u4e00\u4e2a\u6d88\u606f\u5931\u8d25\u7b2c\u4e8c\u4e2a\u53d1\u9001\u6210\u529f\uff0c\u5219\u7b2c\u4e8c\u6761\u6d88\u606f\u4f1a\u6bd4\u7b2c\u4e00\u6761\u6d88\u606f\u51fa\u73b0\u8981\u65e9\u3002
spring.kafka.producer.retries=0
#producer\u53ef\u4ee5\u7528\u6765\u7f13\u5b58\u6570\u636e\u7684\u5185\u5b58\u5927\u5c0f\u3002\u5982\u679c\u6570\u636e\u4ea7\u751f\u901f\u5ea6\u5927\u4e8e\u5411broker\u53d1\u9001\u7684\u901f\u5ea6\uff0cproducer\u4f1a\u963b\u585e\u6216\u8005\u629b\u51fa\u5f02\u5e38\uff0c\u4ee5\u201cblock.on.buffer.full\u201d\u6765\u8868\u660e\u3002\u8fd9\u9879\u8bbe\u7f6e\u5c06\u548cproducer\u80fd\u591f\u4f7f\u7528\u7684\u603b\u5185\u5b58\u76f8\u5173\uff0c\u4f46\u5e76\u4e0d\u662f\u4e00\u4e2a\u786c\u6027\u7684\u9650\u5236\uff0c\u56e0\u4e3a\u4e0d\u662fproducer\u4f7f\u7528\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u7528\u4e8e\u7f13\u5b58\u3002\u4e00\u4e9b\u989d\u5916\u7684\u5185\u5b58\u4f1a\u7528\u4e8e\u538b\u7f29\uff08\u5982\u679c\u5f15\u5165\u538b\u7f29\u673a\u5236\uff09\uff0c\u540c\u6837\u8fd8\u6709\u4e00\u4e9b\u7528\u4e8e\u7ef4\u62a4\u8bf7\u6c42\u3002
spring.kafka.producer.buffer-memory=33554432
#key\u5e8f\u5217\u5316\u65b9\u5f0f
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#\u6d88\u8d39\u8005\u7684\u914d\u7f6e
#Kafka\u4e2d\u6ca1\u6709\u521d\u59cb\u504f\u79fb\u6216\u5982\u679c\u5f53\u524d\u504f\u79fb\u5728\u670d\u52a1\u5668\u4e0a\u4e0d\u518d\u5b58\u5728\u65f6,\u9ed8\u8ba4\u533a\u6700\u65b0 \uff0c\u6709\u4e09\u4e2a\u9009\u9879 \u3010latest, earliest, none\u3011
spring.kafka.consumer.auto-offset-reset=latest
#\u662f\u5426\u5f00\u542f\u81ea\u52a8\u63d0\u4ea4
spring.kafka.consumer.enable-auto-commit=true
#\u81ea\u52a8\u63d0\u4ea4\u7684\u65f6\u95f4\u95f4\u9694
spring.kafka.consumer.auto-commit-interval=100
#key\u7684\u89e3\u7801\u65b9\u5f0f
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#value\u7684\u89e3\u7801\u65b9\u5f0f
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#\u5728/usr/local/etc/kafka/consumer.properties\u4e2d\u6709\u914d\u7f6e
spring.kafka.consumer.group-id=test-consumer-group
###########################kafka\u76f8\u5173

###########################rocketmq\u76f8\u5173
apache.rocketmq.consumer.pushConsumer=XiaourPushConsumer
apache.rocketmq.producer.producerGroup=Xiaour
apache.rocketmq.namesrvAddr=127.0.0.1:9876
###########################rocketmq\u76f8\u5173